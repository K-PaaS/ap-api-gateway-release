#!/bin/bash

set -e -x

############################################################################## 
### BASE SETTING
############################################################################## 

SCRIPT_NAME=$(basename $0)
JOB_NAME=api-gateway
JOB_DIR=/var/vcap/jobs/${JOB_NAME}
PKG_DIR=/var/vcap/packages/${JOB_NAME}
CONF_DIR=${JOB_DIR}/config

RUN_DIR=/var/vcap/sys/run/${JOB_NAME}
LOG_DIR=/var/vcap/sys/log/${JOB_NAME}
TMP_DIR=/var/vcap/sys/tmp/${JOB_NAME}

export GNUTLS_CPUID_OVERRIDE=0x1 

function setup_environment() {

  for dir in ${RUN_DIR} ${LOG_DIR} ${TMP_DIR}
  do
    mkdir -p ${dir}
    chown vcap:vcap ${dir}
    chmod 775 ${dir}
    echo "##### SETUP_ENVIRONMENT :: API-GATEWAY :: ${dir}"
  done

}

setup_environment
source /var/vcap/packages/common/syslog_utils.sh
tee_output_to_sys_log_and_file ${LOG_DIR} ${SCRIPT_NAME}

############################################################################## 
### API-GATEWAY PRE-START
############################################################################## 

CONF_TARGET_DIR=${PKG_DIR}/repository/conf

# config Update
cp ${CONF_DIR}/log4j2.properties ${PKG_DIR}/repository/conf
cp ${CONF_DIR}/deployment.toml ${PKG_DIR}/repository/conf

# symbolic link for logging (The patches.log set in lib / org.wso2.carbon.server-x.x.jar) 
ln -sf ${PKG_DIR}/repository/logs/patches.log ${LOG_DIR}/patches.log

# Creating New Keystores
<%
  def spec_ext_ip
    if spec.networks.vip.present?
      spec.networks.vip.ip
    elsif spec.networks.service_public.present?
      spec.networks.service_public.ip
    else
      spec.address
    end
  end
  WSO2_SERVER_URL = spec_ext_ip
%>
cd /var/vcap/packages/api-gateway/repository/resources/security

if [ ! -f  PaaS-TA.jks ]; then
    /var/vcap/packages/java/bin/keytool -genkey -alias PaaS-TA -keyalg RSA -keysize 2048 -keystore PaaS-TA.jks -dname "CN=<%= "#{WSO2_SERVER_URL}" %>, OU=PaaS-TA,O=PaaS-TA,L=PaaS-TA,S=PaaS-TA,C=KR" -storepass <%= p('service.admin_password') %> -keypass <%= p('service.admin_password') %>

    /var/vcap/packages/java/bin/keytool -export -alias PaaS-TA -keystore PaaS-TA.jks -file PaaS-TA.pem

    /var/vcap/packages/java/bin/keytool -import -alias PaaS-TA -noprompt -file PaaS-TA.pem -keystore client-truststore.jks -storepass wso2carbon
fi

#sed -i'' -r -e "/<\/parameters>/i\        <parameter name=\"wss.ssl.cipher.suites\">{{apim.wss.ssl_enabled_ciphers}}<\/parameter>" /var/vcap/packages/api-gateway/repository/resources/conf/templates/repository/deployment/server/synapse-configs/default/inbound-endpoints/SecureWebSocketInboundEndpoint.xml.j2
sed -i "s/#identity.server.service.contextURL/identity.server.service.contextURL/"  /var/vcap/packages/api-gateway/repository/deployment/server/webapps/accountrecoveryendpoint/RecoveryEndpointConfig.properties 
sed -i "s/#identity.server.service.contextURL/identity.server.service.contextURL/"  /var/vcap/packages/api-gateway/repository/deployment/server/webapps/accountrecoveryendpoint/WEB-INF/classes/RecoveryEndpointConfig.properties 

##############################################################################
### API-GATEWAY PRE-START :: mysql-client
##############################################################################

if [ ! -e ${LOG_DIR}/mysql-client ]; then

    echo "##### SETUP :: API-GATEWAY :: mysql-client :: START"
    export DEBIAN_FRONTEND=noninteractive
   #export GNUTLS_CPUID_OVERRIDE=0x1 
    apt-get update
    apt-get upgrade -y
    apt-get install -y wget lsb-release gnupg
    
    debconf-set-selections <<< 'mysql-apt-config mysql-apt-config/unsupported-platform select ubuntu bionic'
    debconf-set-selections <<< 'mysql-apt-config mysql-apt-config/select-server select mysql-5.7'
    debconf-set-selections <<< 'mysql-apt-config mysql-apt-config/repo-codename select bionic'
    debconf-set-selections <<< 'mysql-apt-config mysql-apt-config/repo-distro select ubuntu'
    
    wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb
    dpkg -i mysql-apt-config_0.8.12-1_all.deb
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29
    apt-get update
    apt-get install -y -f mysql-client=5.7*
    echo "##### SETUP :: API-GATEWAY :: mysql-client :: END"
    touch ${LOG_DIR}/mysql-client
fi

##############################################################################
### CCE enable = <%= p('mariadb.cce_enable') %>
##############################################################################
  <% if p('mariadb.cce_enable') %>
if [ ! -e ${LOG_DIR}/mysql-client-lib-CCE ]; then
  echo "##### SETUP :: APP-GATEWAY :: mysql-client-lib(CCE) :: START"

  apt install apt-transport-https -y
  apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
  echo "sunny apt-key"
  cp /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d/
  echo "sunny cp trusted.gpg"
  curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash

  apt-get install software-properties-common -y
  #add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://sfo1.mirrors.digitalocean.com/mariadb/repo/10.3/ubuntu bionic main'
  echo 'sunny install software-properties-common -y'
  apt update -y
  echo 'sunny apt update'
  apt-get install libmariadbclient18 -y
  echo 'sunny install libmariadbclient18 -y'
  mkdir -p /usr/lib/mysql/plugin/
  echo 'sunny mkdir'
  cp /usr/lib/x86_64-linux-gnu/libmariadb3/plugin/client_ed25519.so  /usr/lib/mysql/plugin/
  touch ${LOG_DIR}/mysql-client-lib-CCE
  echo "##### SETUP :: APP-GATEWAY :: mysql-client-lib(CCE) :: END"
fi
  <% end %>
